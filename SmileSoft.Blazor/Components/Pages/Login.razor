@page "/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using API.Clients
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Iniciar Sesión</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="username">Usuario:</label>
                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Contraseña:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Ingresar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel { get; set; } = new();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (success)
            {
                // Obtener datos del odontólogo de la sesión
                var rol = await AuthService.GetRolAsync();

                if (rol?.Equals("Odontologo", StringComparison.OrdinalIgnoreCase) == true)
                {
                    var odontologoId = await AuthService.GetOdontologoIdAsync();
                    var nombreCompleto = await AuthService.GetOdontologoNombreCompletoAsync();

                    // Los datos ya están almacenados en la sesión y disponibles en toda la aplicación
                    Console.WriteLine($"Odontólogo logueado: ID={odontologoId}, Nombre={nombreCompleto}");
                    
                    Navigation.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    // Cerrar sesión para evitar que el usuario quede autenticado
                    await AuthService.LogoutAsync();
                    errorMessage = "El usuario no es un odontólogo. Utilizar SmileSoft Desktop.";
                }
            }
            else
            {
                errorMessage = "Usuario o contraseña incorrectos";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El nombre de usuario es requerido.")]
        public string Username { get; set; } = "";
        [Required(ErrorMessage = "La contraseña es requerida.")]
        public string Password { get; set; } = "";
    }
}