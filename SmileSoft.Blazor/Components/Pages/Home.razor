@using SmileSoft.API.Clients;
@using DTO;
@page "/"
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Inicio</PageTitle>

<h1>Bienvenido (odontólogo que inició sesión)</h1>

<div class="date-navigation">
    <span>Turnos para el día:</span>
    <button class="btn btn-sm btn-outline-primary" @onclick="PreviousDay" disabled="@isLoading">◀</button>
    <input type="date" class="form-control d-inline-block mx-2" style="width: auto;" 
           value="@fechaSeleccionada.ToString("yyyy-MM-dd")" 
           @onchange="OnDateChanged"
           disabled="@isLoading" />
    <button class="btn btn-sm btn-outline-primary" @onclick="NextDay" disabled="@isLoading">▶</button>
</div>

@if (isLoading)
{
    <p><em>Cargando...</em></p>
}
else if (atencionesFiltradasOriginal == null || !atencionesFiltradasOriginal.Any())
{
    <div class="alert alert-info mt-3">
        No hay atenciones programadas para el día @fechaSeleccionada.ToString("dd/MM/yyyy")
    </div>
}
else
{
    <input type="text" class="form-control mt-3" placeholder="Buscar por paciente o DNI..." @oninput="(e) => {
        var searchTerm = e.Value?.ToString()?.ToLower() ?? string.Empty;
        atencionesFiltradas = atencionesFiltradasOriginal
            .Where(a => a.PacienteNombre.ToLower().Contains(searchTerm) ||
                        a.PacienteApellido.ToLower().Contains(searchTerm) ||
                        a.PacienteDni.Contains(searchTerm))
            .ToList();
    }" />
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Fecha y hora</th>
                <th>Paciente</th>
                <th>Dni</th>
                <th>Estado</th>
                <th>Tipo de atención</th>
                <th></th> <!--columna para boton para registrar observaciones-->
            </tr>
        </thead>
        <tbody>
            @foreach (var atencion in atencionesFiltradas)
            {
                <tr>
                    <td>@atencion.FechaHoraAtencion.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@atencion.PacienteNombre @atencion.PacienteApellido</td>
                    <td>@atencion.PacienteDni</td>
                    <td>@atencion.Estado</td>
                    <td>@atencion.TipoAtencionDescripcion</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => AgregarDetalle(atencion.Id)">Registrar Observaciones</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<AtencionDetalleDTO>? atencionesFiltradas;
    private List<AtencionDetalleDTO> atencionesFiltradasOriginal = new();
    private DateTime fechaSeleccionada = DateTime.Today;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAtenciones(fechaSeleccionada);
    }

    private async Task LoadAtenciones(DateTime fecha)
    {
        isLoading = true;
        StateHasChanged(); // Force UI update to show loading state

        try
        {
            var atencionesResponse = await AtencionApiClient.GetByFechaRangeAndOdoAsync(
                fecha.Date,
                fecha.Date.AddDays(1),
                1 //TODO reemplazar por el id del odontólogo logueado
            );

            atencionesFiltradas = (atencionesResponse != null && atencionesResponse.Any())
                ? atencionesResponse.OrderBy(a => a.FechaHoraAtencion).ToList()
                : Array.Empty<AtencionDetalleDTO>();
            atencionesFiltradasOriginal = atencionesFiltradas.ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Force UI update after data load
        }
    }

    private async Task PreviousDay()
    {
        if (isLoading) return; // Prevent multiple simultaneous requests

        fechaSeleccionada = fechaSeleccionada.AddDays(-1);
        await LoadAtenciones(fechaSeleccionada);
    }

    private async Task NextDay()
    {
        if (isLoading) return; // Prevent multiple simultaneous requests

        fechaSeleccionada = fechaSeleccionada.AddDays(1);
        await LoadAtenciones(fechaSeleccionada);
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (isLoading) return; // Prevent multiple simultaneous requests

        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            fechaSeleccionada = newDate;
            await LoadAtenciones(fechaSeleccionada);
        }
    }
    private void AgregarDetalle(int id)
    {
        string url = $"/detalleAtencion/{id}";
        Navigation.NavigateTo(url);
    }
}
