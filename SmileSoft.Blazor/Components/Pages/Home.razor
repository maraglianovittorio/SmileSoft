@using SmileSoft.API.Clients;
@using SmileSoft.DTO;
@page "/"
@inject NavigationManager Navigation
@inject IAuthService AuthService

@rendermode InteractiveServer

<PageTitle>Inicio</PageTitle>
@if (isLoading)
{
    <p>Verificando autenticación...</p>
}
else if (isAuthenticated)
{
    <div class="mb-3">
        <h1>Bienvenido @nombreCompletoOdontologo</h1>
        <p class="text-muted">Usuario: @username</p>
    </div>
}

<div class="date-navigation">
    <span>Turnos para el día:</span>
    <button class="btn btn-sm btn-outline-primary" @onclick="PreviousDay" disabled="@isLoading">◀</button>
    <input type="date" class="form-control d-inline-block mx-2" style="width: auto;" 
           value="@fechaSeleccionada.ToString("yyyy-MM-dd")" 
           @onchange="OnDateChanged"
           disabled="@isLoading" />
    <button class="btn btn-sm btn-outline-primary" @onclick="NextDay" disabled="@isLoading">▶</button>
</div>

@if (isLoading)
{
    <p><em>Cargando...</em></p>
}
else if (atencionesFiltradasOriginal == null || !atencionesFiltradasOriginal.Any())
{
    <div class="alert alert-info mt-3">
        No hay atenciones programadas para el día @fechaSeleccionada.ToString("dd/MM/yyyy")
    </div>
}
else
{
    <input type="text" class="form-control mt-3" placeholder="Buscar por paciente o DNI..." @oninput="(e) => {
        var searchTerm = e.Value?.ToString()?.ToLower() ?? string.Empty;
        atencionesFiltradas = atencionesFiltradasOriginal
            .Where(a => a.PacienteNombre.ToLower().Contains(searchTerm) ||
                        a.PacienteApellido.ToLower().Contains(searchTerm) ||
                        a.PacienteDni.Contains(searchTerm))
            .ToList();
    }" />
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Fecha y hora</th>
                <th>Paciente</th>
                <th>Dni</th>
                <th>Estado</th>
                <th>Tipo de atención</th>
                <th></th> <!--columna para boton para registrar observaciones-->
            </tr>
        </thead>
        <tbody>
            @foreach (var atencion in atencionesFiltradas)
            {
                <tr>
                    <td>@atencion.FechaHoraAtencion.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@atencion.PacienteNombre @atencion.PacienteApellido</td>
                    <td>@atencion.PacienteDni</td>
                    <td style="@(atencion.Estado.ToLower() == "en espera" ? "color: green; font-weight: 600;" : 
                                  atencion.Estado.ToLower() == "cancelada" ? "color: red; font-weight: 500;" : 
                                  "color: black;")">
                        @atencion.Estado
                    </td>
                    <td>@atencion.TipoAtencionDescripcion</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => AgregarDetalle(atencion.Id)">Registrar Observaciones</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isAuthenticated = false;
    private string username = "";
    private string nombreCompletoOdontologo = "";
    private int? odontologoId;
    private string? rol;
    private IEnumerable<AtencionDetalleDTO>? atencionesFiltradas;
    private List<AtencionDetalleDTO> atencionesFiltradasOriginal = new();
    private DateTime fechaSeleccionada = DateTime.Today;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // espera a verificar autenticación antes de cargar informacion
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (!isAuthenticated)
        {
            return;
        }

        // Obtener datos del usuario
        username = await AuthService.GetUsernameAsync() ?? "";
        rol = await AuthService.GetRolAsync();
        
        // Obtener datos del odontólogo si el rol es "Odontologo"
        if (rol?.Equals("Odontologo", StringComparison.OrdinalIgnoreCase) == true)
        {
            odontologoId = await AuthService.GetOdontologoIdAsync();
            nombreCompletoOdontologo = await AuthService.GetOdontologoNombreCompletoAsync() ?? username;
            
            // Cargar atenciones del odontólogo logueado
            await LoadAtenciones(fechaSeleccionada);
        }
        else
        {
            nombreCompletoOdontologo = username;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }

            isLoading = false;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAtenciones(DateTime fecha)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Validar que tenemos el ID del odontólogo antes de hacer la petición
            if (!odontologoId.HasValue)
            {
                Console.WriteLine("No se pudo obtener el ID del odontólogo");
                atencionesFiltradas = Array.Empty<AtencionDetalleDTO>();
                atencionesFiltradasOriginal = new List<AtencionDetalleDTO>();
                return;
            }

            var atencionesResponse = await AtencionApiClient.GetByFechaRangeAndOdoAsync(
                fecha.Date,
                fecha.Date.AddDays(1),
                odontologoId.Value // Usar el ID del odontólogo logueado
            );

            atencionesFiltradas = (atencionesResponse != null && atencionesResponse.Any())
                ? atencionesResponse.OrderBy(a => a.FechaHoraAtencion).ToList()
                : Array.Empty<AtencionDetalleDTO>();
            atencionesFiltradasOriginal = atencionesFiltradas.ToList();
        }
        catch (UnauthorizedAccessException)
        {
            // Sesión expiró durante la navegación
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando atenciones: {ex.Message}");
            atencionesFiltradas = Array.Empty<AtencionDetalleDTO>();
            atencionesFiltradasOriginal = new List<AtencionDetalleDTO>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task PreviousDay()
    {
        if (isLoading) return;
        fechaSeleccionada = fechaSeleccionada.AddDays(-1);
        await LoadAtenciones(fechaSeleccionada);
    }

    private async Task NextDay()
    {
        if (isLoading) return;
        fechaSeleccionada = fechaSeleccionada.AddDays(1);
        await LoadAtenciones(fechaSeleccionada);
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (isLoading) return;
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            fechaSeleccionada = newDate;
            await LoadAtenciones(fechaSeleccionada);
        }
    }

    private void AgregarDetalle(int id)
    {
        Navigation.NavigateTo($"/detalleAtencion/{id}");
    }
}
