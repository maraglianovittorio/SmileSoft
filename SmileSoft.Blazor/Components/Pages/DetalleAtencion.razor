@using SmileSoft.API.Clients;
@using DTO;

@page "/detalleAtencion/{IdAtencion:int}"
@inject NavigationManager Navigation
@inject IAuthService AuthService

@rendermode InteractiveServer

<PageTitle>Detalle de Atención</PageTitle>
<button class="btn btn-sm btn-primary" @onclick="@(() => Navigation.NavigateTo(""))">◀ Volver</button>
<button class="btn btn-sm btn-secondary" @onclick="@(() => VerHistoriaClinica(atencion.PacienteId))">Ver historia clínica</button>
<h1>Detalle de Atención</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @mensajeError
        <button type="button" class="btn-close" @onclick="() => mensajeError = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @mensajeExito
        <button type="button" class="btn-close" @onclick="() => mensajeExito = string.Empty"></button>
    </div>
}

@if (isLoading)
{
    <p><em>Cargando...</em></p>
}
else if (atencion == null)
{
    <div class="alert alert-info mt-3">
        No se encontró la atención.
    </div>
}
else
{
    <div class="mt-3">
        <p><strong>ID:</strong> @atencion.Id</p>
        <p><strong>Paciente:</strong> @atencion.PacienteNombre @atencion.PacienteApellido</p>
        <p><strong>DNI:</strong> @atencion.PacienteDni</p>
        <p><strong>Fecha y Hora:</strong> @atencion.FechaHoraAtencion.ToString("dd/MM/yyyy HH:mm")</p>
        <p><strong>Estado:</strong> @atencion.Estado</p>
        <p><strong>Tipo de Atención:</strong> @atencion.TipoAtencionDescripcion</p>
    </div>
    <p><strong>Observaciones anteriores:</strong></p>
    <div class="border p-3 mb-3" style="background-color: #f8f9fa; min-height: 100px;">
        @if (string.IsNullOrWhiteSpace(atencion.Observaciones))
        {
            <em>No hay observaciones previas.</em>
        }
        else
        {
            <textarea @bind="@atencion.Observaciones" class="form-control" rows="10" disabled></textarea>
        }
    </div>
    <textarea @bind="@nuevaObservacion" placeholder="Agregar observaciones de la atención..." class="form-control" rows="5" disabled="@isSaving" />
    <button class="btn btn-sm btn-success mt-2" @onclick="GuardarObservaciones" disabled="@isSaving">
        @if (isSaving)
        {
            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            <span>Guardando...</span>
        }
        else
        {
            <span>Guardar Observaciones</span>
        }
    </button>
}

@code {
    [Parameter]
    public int IdAtencion { get; set; }
    string nuevaObservacion = string.Empty;
    private bool isLoading = false;
    private bool isSaving = false;
    private string mensajeError = string.Empty;
    private string mensajeExito = string.Empty;
    AtencionDetalleDTO atencion = new AtencionDetalleDTO();

    protected override async Task OnInitializedAsync()
    {
        await BuscaAtencion(IdAtencion);
    }

    private void VerHistoriaClinica(int pacienteId)
    {
        Navigation.NavigateTo($"/historiaClinica/{pacienteId}");
    }
    private async Task BuscaAtencion(int IdAtencion)
    {
        isLoading = true;
        mensajeError = string.Empty;

        try
        {
            var atencionResponse = await AtencionApiClient.GetOneAsync(IdAtencion);
            atencion = atencionResponse ?? new AtencionDetalleDTO();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar la atención: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task GuardarObservaciones(MouseEventArgs args)
    {
        isSaving = true;
        mensajeError = string.Empty;
        mensajeExito = string.Empty;
        
        try
        {
            string nombreOdontologo = await AuthService.GetOdontologoNombreCompletoAsync(); 
            string observacionCompleta = nombreOdontologo + "\n" + nuevaObservacion?.Trim();
            await AtencionApiClient.UpdateObservacionesAsync(atencion.Id, observacionCompleta);
            mensajeExito = "Observaciones guardadas correctamente.";
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al guardar observaciones: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}

