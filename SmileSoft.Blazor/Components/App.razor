<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="SmileSoft.Blazor.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script>
        // Función original (mantener por compatibilidad)
        function downloadFileFromStream(fileName, content) {
            try {
                const byteCharacters = atob(content);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/pdf' });

                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', fileName);
                document.body.appendChild(link);
                link.click();

                // Limpiar después de un delay para asegurar que la descarga comience
                setTimeout(() => {
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                }, 100);
            } catch (error) {
                console.error('Error al descargar el archivo:', error);
            }
        }

        // Nueva función que abre en nueva pestaña (no causa desconexión)
        function openPdfInNewTab(fileName, content) {
            try {
                const byteCharacters = atob(content);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/pdf' });

                const url = window.URL.createObjectURL(blob);

                // Abrir en nueva pestaña en lugar de descargar
                const newWindow = window.open(url, '_blank');

                // Limpiar URL después de un delay
                setTimeout(() => {
                    window.URL.revokeObjectURL(url);
                }, 1000);

                if (!newWindow) {
                    alert('Por favor, permite las ventanas emergentes para ver el PDF.');
                }
            } catch (error) {
                console.error('Error al abrir el PDF:', error);
                alert('Error al abrir el PDF: ' + error.message);
            }
        }

        // Función alternativa: forzar descarga sin perder conexión
        function downloadFileFromStreamSafe(fileName, content) {
            try {
                const byteCharacters = atob(content);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/pdf' });

                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = fileName;
                link.target = '_blank';

                // Usar setTimeout para permitir que Blazor procese el estado antes de la descarga
                setTimeout(() => {
                    link.click();
                    setTimeout(() => {
                        window.URL.revokeObjectURL(url);
                    }, 100);
                }, 0);
            } catch (error) {
                console.error('Error al descargar el archivo:', error);
            }
        }
    </script>
</body>

</html>
